<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/05/chapter3%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<h1 id="第三章-物理内存分配"><a href="#第三章-物理内存分配" class="headerlink" title="第三章 物理内存分配"></a>第三章 物理内存分配</h1><h2 id="3-1-计算机体系结构及内存分层体系"><a href="#3-1-计算机体系结构及内存分层体系" class="headerlink" title="3.1 计算机体系结构及内存分层体系"></a>3.1 计算机体系结构及内存分层体系</h2><h3 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h3><p>计算机组成原理</p>
<p>CPU，内存，总线，I/O</p>
<h3 id="内存体系结构"><a href="#内存体系结构" class="headerlink" title="内存体系结构"></a>内存体系结构</h3><h3 id="OS内存管理目标"><a href="#OS内存管理目标" class="headerlink" title="OS内存管理目标"></a>OS内存管理目标</h3><ul>
<li>抽象（逻辑地址空间）：应用程序不需要考虑底层细节</li>
<li>保护（独立地址空间）：内存中可以运行多个应用程序，多个程序可能访问别的程序的地址空间或者破坏其他程序</li>
<li>共享（访问相同内存）：进程之间安全有效可靠的数据传递</li>
<li>虚拟化（更多的地址空间）：当内存不够时，把最需要的数据放在内存中，暂时不需要访问的数据可以临时的放到硬盘上</li>
</ul>
<h4 id="OS内存管理方法"><a href="#OS内存管理方法" class="headerlink" title="OS内存管理方法"></a>OS内存管理方法</h4><ul>
<li>程序重定位</li>
<li>分段</li>
<li>分页</li>
<li>虚拟内存</li>
<li>按需分页虚拟内存</li>
</ul>
<p>实现高度依赖于硬件</p>
<ul>
<li>MMU（内存管理单元）：硬件组件负责处理CPU的内存访问请求</li>
</ul>
<h2 id="3-2-地址空间与地址生成"><a href="#3-2-地址空间与地址生成" class="headerlink" title="3.2 地址空间与地址生成"></a>3.2 地址空间与地址生成</h2><h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><p>物理地址空间——硬件支持的地址空间（起始0，MAX_sys）</p>
<p>逻辑地址空间——一个运行的程序所拥有的的内存范围（0，MAX_prog）</p>
<p>逻辑地址的生成</p>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\逻辑地址的生成.png" alt="逻辑地址的生成"></p>
<p>物理地址的生成</p>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\物理地址的生成.png" alt="物理地址的生成"></p>
<ul>
<li>地址安全检查</li>
</ul>
<h2 id="3-3-连续内存分配"><a href="#3-3-连续内存分配" class="headerlink" title="3.3 连续内存分配"></a>3.3 连续内存分配</h2><h3 id="内存碎片"><a href="#内存碎片" class="headerlink" title="内存碎片"></a>内存碎片</h3><p>内存碎片问题指的是空闲的内存无法被利用</p>
<ul>
<li>外部碎片：分配单元之间的未使用内存</li>
<li>内部碎片 :  分配给应用程序的单元内的未使用内存</li>
</ul>
<h3 id="分区的动态分配"><a href="#分区的动态分配" class="headerlink" title="分区的动态分配"></a>分区的动态分配</h3><ul>
<li>第一匹配分配：在内存中找到<strong>第一个</strong>比需求大的空闲块, 分配给应用程序</li>
</ul>
<table>
<thead>
<tr>
<th>分配方式</th>
<th>第一匹配分配</th>
<th>最优适配分配</th>
<th>最差适配分配</th>
</tr>
</thead>
<tbody><tr>
<td>实现需求</td>
<td>1. 按地址排序的空闲块列表<br/>2. 分配需要寻找一个合适的分区<br/>3. 重分配需要检查是否可以合并相邻空闲分区</td>
<td>1. 按尺寸排序的空闲块列表<br/>2. 分配需要寻找一个合适的分区<br/>3. 重分配需要检查是否可以合并相邻空闲分区</td>
<td>1. 按尺寸排序的空闲块列表<br/>2. 分配最大的分区<br/>3. 重分配需要检查是否可以合并相邻空闲分区</td>
</tr>
<tr>
<td>优势</td>
<td>简单 / 易于产生更大空闲块</td>
<td>比较简单 / 大部分分配是小尺寸时有效</td>
<td>分配很快 / 大部分分配是中尺寸时高效</td>
</tr>
<tr>
<td>劣势</td>
<td>产生外部碎片 / 不确定性</td>
<td>产生外部碎片 / 重分配慢 / 易产生很多没用的微小碎片</td>
<td>产生外部碎片 / 重分配慢 / 易于破碎大的空闲块以致大分区无法被分配</td>
</tr>
</tbody></table>
<h2 id="3-4-连续内存分配：压缩式与交换式碎片整理"><a href="#3-4-连续内存分配：压缩式与交换式碎片整理" class="headerlink" title="3.4 连续内存分配：压缩式与交换式碎片整理"></a>3.4 连续内存分配：压缩式与交换式碎片整理</h2><p>无论使用那种算法，都可能产生碎片，希望想有一些办法使得碎片减少甚至消失</p>
<h3 id="压缩式碎片整理"><a href="#压缩式碎片整理" class="headerlink" title="压缩式碎片整理"></a>压缩式碎片整理</h3><ul>
<li>重置程序以合并空洞</li>
<li>要求所有程序是动态可充值的</li>
<li>议题<ul>
<li>何时重置？</li>
<li>开销</li>
</ul>
</li>
</ul>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\连续碎片整理.png" alt="连续碎片整理"></p>
<p>通过拷贝完成（重定位）</p>
<p>在运行的时候挪操作，地址会不对</p>
<ul>
<li><p>应在程序停止时进行</p>
</li>
<li><p>开销很大，甚至可能影响整个系统的正常执行</p>
</li>
</ul>
<h3 id="交换式碎片整理"><a href="#交换式碎片整理" class="headerlink" title="交换式碎片整理"></a>交换式碎片整理</h3><ul>
<li>运行程序需要更多的内存</li>
<li>抢占等待的程序&amp;回收他们的内存(把暂时不用的内容挪到磁盘里)</li>
<li>议题：哪些程序应该被抢占以及什么时候执行</li>
</ul>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\交换式岁碎片整理.png" alt="交换式碎片整理"></p>
<p>操作系统内核特征</p>
<ul>
<li>并发：计算机系统中同时存在多个运行的程序，需要OS管理和调度</li>
<li>共享：宏观上“同时访问”，微观上互斥共享</li>
<li>虚拟：利用多到程序设计技术，让每个用户都觉得有一个计算机专门为他服务</li>
<li>异步：程序的执行不是一贯到底，而是走走停停，向前推进的速度不可预知，只要运行环境相同，OS需要保证程序运行的结果也要相同</li>
</ul>
]]></content>
  </entry>
</search>
