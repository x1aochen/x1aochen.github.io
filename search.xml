<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>第三章 物理内存分配</title>
    <url>/2022/02/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/chapter3%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<h1 id="第三章-物理内存分配"><a href="#第三章-物理内存分配" class="headerlink" title="第三章 物理内存分配"></a>第三章 物理内存分配</h1><h2 id="3-1-计算机体系结构及内存分层体系"><a href="#3-1-计算机体系结构及内存分层体系" class="headerlink" title="3.1 计算机体系结构及内存分层体系"></a>3.1 计算机体系结构及内存分层体系</h2><h3 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h3><p>计算机组成原理</p>
<p>CPU，内存，总线，I/O</p>
<h3 id="内存体系结构"><a href="#内存体系结构" class="headerlink" title="内存体系结构"></a>内存体系结构</h3><h3 id="OS内存管理目标"><a href="#OS内存管理目标" class="headerlink" title="OS内存管理目标"></a>OS内存管理目标</h3><ul>
<li>抽象（逻辑地址空间）：应用程序不需要考虑底层细节</li>
<li>保护（独立地址空间）：内存中可以运行多个应用程序，多个程序可能访问别的程序的地址空间或者破坏其他程序</li>
<li>共享（访问相同内存）：进程之间安全有效可靠的数据传递</li>
<li>虚拟化（更多的地址空间）：当内存不够时，把最需要的数据放在内存中，暂时不需要访问的数据可以临时的放到硬盘上</li>
</ul>
<h4 id="OS内存管理方法"><a href="#OS内存管理方法" class="headerlink" title="OS内存管理方法"></a>OS内存管理方法</h4><ul>
<li>程序重定位</li>
<li>分段</li>
<li>分页</li>
<li>虚拟内存</li>
<li>按需分页虚拟内存</li>
</ul>
<p>实现高度依赖于硬件</p>
<ul>
<li>MMU（内存管理单元）：硬件组件负责处理CPU的内存访问请求</li>
</ul>
<h2 id="3-2-地址空间与地址生成"><a href="#3-2-地址空间与地址生成" class="headerlink" title="3.2 地址空间与地址生成"></a>3.2 地址空间与地址生成</h2><h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><p>物理地址空间——硬件支持的地址空间（起始0，MAX_sys）</p>
<p>逻辑地址空间——一个运行的程序所拥有的的内存范围（0，MAX_prog）</p>
<p>逻辑地址的生成</p>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\逻辑地址的生成.png" alt="逻辑地址的生成"></p>
<p>物理地址的生成</p>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\物理地址的生成.png" alt="物理地址的生成"></p>
<ul>
<li>地址安全检查</li>
</ul>
<h2 id="3-3-连续内存分配"><a href="#3-3-连续内存分配" class="headerlink" title="3.3 连续内存分配"></a>3.3 连续内存分配</h2><h3 id="内存碎片"><a href="#内存碎片" class="headerlink" title="内存碎片"></a>内存碎片</h3><p>内存碎片问题指的是空闲的内存无法被利用</p>
<ul>
<li>外部碎片：分配单元之间的未使用内存</li>
<li>内部碎片 :  分配给应用程序的单元内的未使用内存</li>
</ul>
<h3 id="分区的动态分配"><a href="#分区的动态分配" class="headerlink" title="分区的动态分配"></a>分区的动态分配</h3><ul>
<li>第一匹配分配：在内存中找到<strong>第一个</strong>比需求大的空闲块, 分配给应用程序</li>
</ul>
<table>
<thead>
<tr>
<th>分配方式</th>
<th>第一匹配分配</th>
<th>最优适配分配</th>
<th>最差适配分配</th>
</tr>
</thead>
<tbody><tr>
<td>实现需求</td>
<td>1. 按地址排序的空闲块列表<br/>2. 分配需要寻找一个合适的分区<br/>3. 重分配需要检查是否可以合并相邻空闲分区</td>
<td>1. 按尺寸排序的空闲块列表<br/>2. 分配需要寻找一个合适的分区<br/>3. 重分配需要检查是否可以合并相邻空闲分区</td>
<td>1. 按尺寸排序的空闲块列表<br/>2. 分配最大的分区<br/>3. 重分配需要检查是否可以合并相邻空闲分区</td>
</tr>
<tr>
<td>优势</td>
<td>简单 / 易于产生更大空闲块</td>
<td>比较简单 / 大部分分配是小尺寸时有效</td>
<td>分配很快 / 大部分分配是中尺寸时高效</td>
</tr>
<tr>
<td>劣势</td>
<td>产生外部碎片 / 不确定性</td>
<td>产生外部碎片 / 重分配慢 / 易产生很多没用的微小碎片</td>
<td>产生外部碎片 / 重分配慢 / 易于破碎大的空闲块以致大分区无法被分配</td>
</tr>
</tbody></table>
<h2 id="3-4-连续内存分配：压缩式与交换式碎片整理"><a href="#3-4-连续内存分配：压缩式与交换式碎片整理" class="headerlink" title="3.4 连续内存分配：压缩式与交换式碎片整理"></a>3.4 连续内存分配：压缩式与交换式碎片整理</h2><p>无论使用那种算法，都可能产生碎片，希望想有一些办法使得碎片减少甚至消失</p>
<h3 id="压缩式碎片整理"><a href="#压缩式碎片整理" class="headerlink" title="压缩式碎片整理"></a>压缩式碎片整理</h3><ul>
<li>重置程序以合并空洞</li>
<li>要求所有程序是动态可充值的</li>
<li>议题<ul>
<li>何时重置？</li>
<li>开销</li>
</ul>
</li>
</ul>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\连续碎片整理.png" alt="连续碎片整理"></p>
<p>通过拷贝完成（重定位）</p>
<p>在运行的时候挪操作，地址会不对</p>
<ul>
<li><p>应在程序停止时进行</p>
</li>
<li><p>开销很大，甚至可能影响整个系统的正常执行</p>
</li>
</ul>
<h3 id="交换式碎片整理"><a href="#交换式碎片整理" class="headerlink" title="交换式碎片整理"></a>交换式碎片整理</h3><ul>
<li>运行程序需要更多的内存</li>
<li>抢占等待的程序&amp;回收他们的内存(把暂时不用的内容挪到磁盘里)</li>
<li>议题：哪些程序应该被抢占以及什么时候执行</li>
</ul>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\交换式岁碎片整理.png" alt="交换式碎片整理"></p>
<p>操作系统内核特征</p>
<ul>
<li>并发：计算机系统中同时存在多个运行的程序，需要OS管理和调度</li>
<li>共享：宏观上“同时访问”，微观上互斥共享</li>
<li>虚拟：利用多到程序设计技术，让每个用户都觉得有一个计算机专门为他服务</li>
<li>异步：程序的执行不是一贯到底，而是走走停停，向前推进的速度不可预知，只要运行环境相同，OS需要保证程序运行的结果也要相同</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>内存分配</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/chapter4%E9%9D%9E%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<hr>
<p>title: 第四章 非连续内存分配<br>date: 2022-02-05 15:54:34<br>tags: 内存分配<br>categories:操作系统</p>
<hr>
<h1 id="第四章-非连续内存分配"><a href="#第四章-非连续内存分配" class="headerlink" title="第四章 非连续内存分配"></a>第四章 非连续内存分配</h1><ul>
<li>为什么需要非连续内存分配</li>
</ul>
<p>连续内存分配的缺点</p>
<ol>
<li>分配给一个程序的物理内存是连续的</li>
<li>内存利用率低</li>
<li>有外碎片，内碎片的问题</li>
</ol>
<p>非连续内存分配的优点</p>
<ol>
<li>一个程序的物理地址是非连续的</li>
<li>更好的内存利用和管理</li>
<li>允许共享代码与数据（共享库等）</li>
<li>支持动态加载和动态链接</li>
</ol>
<p>非连续分配缺点</p>
<ul>
<li>如何建立虚拟地址和物理地址之间的转换<ul>
<li>软件方案</li>
<li>硬件方案（分段，分页）</li>
</ul>
</li>
</ul>
<h2 id="4-1-分段"><a href="#4-1-分段" class="headerlink" title="4.1 分段"></a>4.1 分段</h2><ul>
<li><p>程序的分段地址空间，分段寻址方案</p>
</li>
<li><p>计算机程序由各种段组成</p>
</li>
<li><p>分段：更好的分离和共享</p>
</li>
</ul>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\分段1.png" alt="分段"></p>
<p>左边连续的虚拟地址，右边不连续的物理地址，采用映射机制进行两边的关联</p>
<ol>
<li>分段寻址方案</li>
</ol>
<ul>
<li>一个段：一个内存“块”</li>
</ul>
<ol start="2">
<li>程序访问内存需要：</li>
</ol>
<ul>
<li>一个2维的二元组（s，addr）<ul>
<li>s—段号</li>
<li>addr—段内偏移</li>
</ul>
</li>
</ul>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\分段寻址方案.png" alt="分段寻址"></p>
<p>操作系统建立段表</p>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><ul>
<li><p>划分物理内存至固定大小的帧</p>
<ul>
<li>大小是2的幂，e.g.，512,4096,8192</li>
</ul>
</li>
<li><p>划分逻辑地址空间至相同大小的页</p>
<ul>
<li>大小同物理地址</li>
</ul>
</li>
<li><p>建立方案 转换逻辑地址为物理地址（pages to frames）</p>
<ul>
<li>页表</li>
<li>MMU/TLB（加速地址的转换）</li>
</ul>
</li>
</ul>
<h3 id="帧（Frame）"><a href="#帧（Frame）" class="headerlink" title="帧（Frame）"></a>帧（Frame）</h3><ul>
<li><p>物理内存被分割为大小相等的帧</p>
</li>
<li><p>一个内存物理地址是一个二元组（f，o）</p>
<ul>
<li>f—帧号（F位，共有2<sup>F</sup>个帧）</li>
<li>o—帧内偏移（S位，每帧有2<sup>S</sup>字节）</li>
<li>物理地址=2<sup>S</sup> * f + o</li>
</ul>
</li>
<li><p>16-bit地址空间, 9-bit(512 byte) 大小的页帧</p>
<ul>
<li>物理地址=（3，6）</li>
<li>物理地址=1542</li>
</ul>
</li>
</ul>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\页帧.png" alt="例子"></p>
<h3 id="页（Page）"><a href="#页（Page）" class="headerlink" title="页（Page）"></a>页（Page）</h3><ul>
<li><p>一个程序的逻辑地址空间被划分为大小相等的页</p>
<ul>
<li>页内偏移的大小 = 帧内偏移的大小</li>
<li>页号大小 &lt;&gt; 帧号大小</li>
</ul>
</li>
<li><p>一个逻辑地址是一个二元组(p, o) </p>
<ul>
<li>p—页号（P位，2<sup>P</sup>个页）</li>
<li>o—页内偏移（S位，每页有2<sup>S</sup>字节）</li>
<li>逻辑地址=2<sup>S</sup> * P + o</li>
</ul>
</li>
</ul>
<p><strong>页寻址机制</strong></p>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\页寻址机制.png" alt="页寻址机制"></p>
<p>操作系统建立页表</p>
<ul>
<li>逻辑地址空间应当大于物理内存空间</li>
<li>页映射到帧</li>
<li>页是连续的虚拟内存</li>
<li>帧是非连续的物理内存(有助于减少碎片的产生)</li>
<li>不是所有的页都有对应的帧</li>
</ul>
<h2 id="4-3-页表-概述、TLB"><a href="#4-3-页表-概述、TLB" class="headerlink" title="4.3 页表-概述、TLB"></a>4.3 页表-概述、TLB</h2><h3 id="页表概述"><a href="#页表概述" class="headerlink" title="页表概述"></a>页表概述</h3><p><strong>页表结构</strong></p>
<ul>
<li>每一个运行的程序都有一个页表<ul>
<li>属于程序运行状态, 会动态变化</li>
<li>PTBR : 页表基址寄存器</li>
</ul>
</li>
</ul>
<p><strong>地址转换</strong></p>
<p><img src="C:\Users\Administrator\Desktop\笔记\图\地址转换.png" alt="地址转换"></p>
<p><strong>分页机制的性能问题</strong></p>
<p>问题：访问一个内存单元需要2次内存访问</p>
<ul>
<li>一次用于获取页表项</li>
<li>一次用于访问数据</li>
</ul>
<p>页表可能非常大</p>
<ul>
<li>64位机器如果每页1024字节, 那么一个页表的大小会是多少？(2<sup>64</sup> / 2<sup>10</sup> = 2<sup>54</sup> 存放不下)</li>
<li>每一个运行的程序都需要有一个页表</li>
</ul>
<p>如何处理</p>
<ul>
<li>缓存</li>
<li>间接访问</li>
</ul>
<h3 id="Translation-Look-aside-Buffer（TLB）（解决速度上问题）"><a href="#Translation-Look-aside-Buffer（TLB）（解决速度上问题）" class="headerlink" title="Translation Look-aside Buffer（TLB）（解决速度上问题）"></a>Translation Look-aside Buffer（TLB）（解决速度上问题）</h3><p>CPU的MMU里面的一个缓冲，CPU中的快表</p>
<p>缓存近期访问的页帧转换表项</p>
<ul>
<li>TLB使用associative memory（关联内存）实现, 具备快速访问性能</li>
<li>如果TLB命中, 物理页号可以很快被获取</li>
<li>如果TLB未命中, 对应的表项被更新到TLB中</li>
<li>常用的表项放在TLB里面</li>
<li>TLB的miss不会很大</li>
<li>写程序时，写出的程序尽量具有访问的局部性，把平时的访问集中在一个区域里，有效较少TLB的缺失</li>
<li>x86的CPU由硬件实现, 其他的可能是由操作系统实现</li>
</ul>
<h2 id="4-4-页表-二级，多级页表"><a href="#4-4-页表-二级，多级页表" class="headerlink" title="4.4 页表-二级，多级页表"></a>4.4 页表-二级，多级页表</h2><p><strong>二级页表（解决空间上问题）</strong></p>
<ul>
<li>将页号分为两个部分, 页表分为两个, 一级页号对应一级页表, 二级页号对应二级页表.</li>
<li>一级页号查表获得在二级页表的起始地址, 地址加上二级页号的值, 在二级页表中获得帧号</li>
<li>节约了一定的空间, 在一级页表中如果resident bit = 0, 可以使得在二级页表中不存储相关index,而只有一张页表的话, 这一些index都需要保留多级页表</li>
</ul>
<ul>
<li>通过把页号分为k个部分, 来实现多级间接页表, 建立一棵页表”树”</li>
</ul>
<h2 id="4-5-页表-反向页表"><a href="#4-5-页表-反向页表" class="headerlink" title="4.5 页表-反向页表"></a>4.5 页表-反向页表</h2><p>大地址空间问题</p>
<ul>
<li>有大地址空间(64-bits), 前向映射页表变得繁琐. 比如 : 使用了5级页表</li>
<li>不是让页表与逻辑地址空间的大小相对应, 而是让页表与物理地址空间的大小相对应. 逻辑地址空间增长速度快于物理地址空间 </li>
</ul>
<h3 id="基于页寄存器（page-registers）的方案"><a href="#基于页寄存器（page-registers）的方案" class="headerlink" title="基于页寄存器（page registers）的方案"></a>基于页寄存器（page registers）的方案</h3><p>每一个帧和一个寄存器关联, 寄存器内容包括 :</p>
<ul>
<li>resident bit : 此帧是否被占用</li>
<li>occupier : 对应的页号 p</li>
<li>protection bits : 保护位</li>
</ul>
<p>实例</p>
<ul>
<li>物理内存大小是 : 4096 * 4096 = 4K * 4KB = 16 MB</li>
<li>页面大小是 : 4096 bytes = 4 KB</li>
<li>页帧数 : 4096 = 4 K</li>
<li>页寄存器使用的空间(假设8 bytes / register) : 8 * 4096 = 32 Kbytes</li>
<li>页寄存器带来的额外开销 : 32K / 16M = 0.2%</li>
<li>虚拟内存大小 : 任意</li>
</ul>
<p>优势</p>
<ul>
<li>转换表的大小相对于物理内存来说很小</li>
<li>转换表的大小跟逻辑地址空间的大小无关</li>
</ul>
<p>劣势</p>
<ul>
<li>需要的信息对调了, 即根据帧号可以找到页号</li>
<li>如何转换回来? (如何根据页号找到帧号)</li>
<li>在需要在反向页表中搜索想要的页号</li>
</ul>
<h3 id="基于关联内存-associative-memory-的方案"><a href="#基于关联内存-associative-memory-的方案" class="headerlink" title="基于关联内存(associative memory)的方案"></a>基于关联内存(associative memory)的方案</h3><p>硬件逻辑复杂，容量不能做太大，还需要放到CPU里面</p>
<ul>
<li><p>如果帧数较少, 页寄存器可以被放置在关联内存中</p>
</li>
<li><p>在关联内存中查找逻辑页号</p>
<ul>
<li>成功 : 帧号被提取</li>
<li>失败 : 页错误异常 (page fault)</li>
</ul>
</li>
<li><p>限制因素：</p>
<ul>
<li>大量的关联内存非常昂贵(难以在单个时钟周期内完成 ; 耗电)</li>
</ul>
</li>
</ul>
<h3 id="基于哈希-hash-的方案"><a href="#基于哈希-hash-的方案" class="headerlink" title="基于哈希(hash)的方案"></a>基于哈希(hash)的方案</h3><p>哈希表，哈希函数 : h(PID, p) 从 PID 标号获得页号</p>
<p>在反向页表中通过哈希算法来搜索一个页对应的帧号</p>
<ul>
<li>对页号做哈希计算, 为了在帧表中获取对应的帧号</li>
<li>页 i 被放置在表 f(i) 位置, 其中 f 是设定的哈希函数</li>
<li>为了查找页 i , 执行下列操作 :<ul>
<li>计算哈希函数 f(i) 并且使用它作为页寄存器表的索引, 获取对应的页寄存器</li>
<li>检查寄存器标签是否包含 i, 如果包含, 则代表成功, 否则失败</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
</search>
